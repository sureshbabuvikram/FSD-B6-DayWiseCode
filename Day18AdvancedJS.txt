Example:1 Event Loop 

console.log("1. Start");
setTimeout(() => {
  console.log("3. Timeout");
}, 1000);
console.log("2. End");

Example:2

console.log('Start');
setTimeout(() => {
  console.log('Timeout 1');
}, 1000);
setTimeout(() => {
  console.log('Timeout 2');
}, 800);
console.log('End');


Example:1 Promise & promise Chaining

const fetchData = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("Data received");   // reject("Data not received");
    }, 1000);
  });
  
  fetchData
    .then((data) => {
      console.log(data); 
      return "Processed Data";
    })
    .then((processedData) => {
      console.log(processedData); 
    })
    .catch((error) => {
      console.error(error);
    });
  
  
Example 2: 

function fetchUserData(userId) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (userId === 1) {
          resolve({ id: 1, name: "John Doe" }); 
        } else {
          reject("Error: User not found!");     
        }
      }, 1000); 
    });
  }
  
 
  fetchUserData(1)
    .then((user) => {
      console.log("User fetched:", user);  
    })
    .catch((error) => {
      console.log(error);   
    });
  

  fetchUserData(2)
    .then((user) => {
      console.log("User fetched:", user);  
    })
    .catch((error) => {
      console.log(error);   
    });
  


Example1: callback & callback hell

function normalFun2() {
    console.log('Callback executed!');
  }

function normalFun(name, callback) {
    console.log(`Hello, ${name}!`);
    callback();
  }
  
  normalFun('suresh',normalFun2 );
  

Example :2 callback hell

function cookRice(callback) {
    console.log('Cooking rice...');
    setTimeout(() => {
      console.log('Rice is cooked!');
      callback();
    }, 2000);
  }
  
  function cookChicken(callback) {
    console.log('Cooking chicken...');
    setTimeout(() => {
      console.log('Chicken is cooked!');
      callback();
    }, 3000);
  }
  
  function serveMeal(callback) {
    console.log('Serving meal...');
    setTimeout(() => {
      console.log('Meal is served!');
      callback();
    }, 1000);
  }
  
  cookRice(function() {
    cookChicken(function() {
      serveMeal(function() {
        console.log('Meal is ready!');
      });
    });
  });


  Example 1 : async await fetch  

async function fetchUserData(userId) {
    try {
            
      const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
      const userData = await response.json();
      return userData;
    } catch (error) {
      console.error(`Error fetching user data: ${error}`);
    }
  }
  
  async function main() {
    const userId = 1;
    const userData = await fetchUserData(userId);
    console.log(`User Data: ${userData.name} - ${userData.email}`);
  }
  
  main();


  Example 2: 

 async function fetchUserData(userId) {
    try {
      const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
      console.log(response);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const userData = await response.json();
      return userData;
    } catch (error) {
      console.error(`Error fetching user data: ${error.message}`);
      throw error; // re-throw the error to propagate it
    }
  }
  
  async function main() {
    const userId = 123;
    try {
      const userData = await fetchUserData(userId);
      console.log(`User Data: ${userData.name} - ${userData.email}`);
    } catch (error) {
      console.error(`Error in main: ${error.message}`);
    }
  }
  
  main();


  Example : 3

  async function fetchGitHubUser(username) {
    try {
      const response = await fetch(`https://api.github.com/users/${username}`);
      const userData = await response.json(); 
      console.log("GitHub User:", userData);
    } catch (error) {
      console.error("Error fetching user:", error);
    }
  }
  
  fetchGitHubUser("sureshbabuvikram");  